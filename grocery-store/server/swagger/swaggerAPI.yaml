tags:
  - name: User
    description: User operations
  - name: Profile
    description: Profile operation
  - name: Order
    description: Order operation
  - name: Product
    description: Product operation
  - name: Category
    description: Category operation
paths:
  /api/user/registration:
    post:
      tags: 
        - User
      summary: User registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/user/login:
    post:
      tags: 
        - User
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/user/verify:
    post:
      tags: 
        - User
      summary: Verify user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserVerification'
      responses:
        '200':
          description: Successful verification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/user/resetPassword:
    post:
      tags: 
        - User
      summary: Reset user password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordReset'
      responses:
        '200':
          description: Successful password reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          
  /api/user/auth:
    get:
      tags: 
        - User
      summary: Check user authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'

  /api/profile:
    get:
      tags:
        - Profile
      summary: Get all users
      parameters:
        - name: limit
          in: query
          description: Number of elements per page
          schema:
            type: integer
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  rows:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"

  /api/profile/couriers:
    get:
      tags:
        - Profile
      summary: Get all couriers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /api/profile/{phone}:
    get:
      tags:
        - Profile
      summary: Get a user by phone number
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    put:
      tags:
        - Profile
      summary: Update a user by phone number
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    delete:
      tags:
        - Profile
      summary: Delete a user by phone number
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                
  /api/profile/{phone}/admin:
    delete:
      tags:
        - Profile
      summary: Delete a user by phone number (admin only)
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/order:
    get:
      tags:
        - Order
      summary: Get a list of all orders
      parameters:
        - name: limit
          in: query
          description: Number of elements per page
          schema:
            type: integer
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
    post:
      tags:
        - Order
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /api/order/{phone}:
    get:
      tags:
        - Order
      summary: Get order information by phone
      security:
        - BearerAuth: []
      parameters:
        - name: phone
          required: true
          in: path
          description: User Phone
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of elements per page
          schema:
            type: integer
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: No rights to receive another user's information
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/order/{id}:                    
    put:
      tags:
        - Order
      summary: Update order status
      parameters:
        - name: id
          required: true
          in: path
          description: Order ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatus'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          
    delete:
      tags:
        - Order
      summary: Delete an order
      parameters:
        - name: id
          required: true
          in: path
          description: Order ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/order/{id}/courier:
    put:
      tags:
        - Order
      summary: Assign a courier for the order
      parameters:
        - name: id
          required: true
          in: path
          description: Order ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderCourier'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCourier'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/order/{id}/products:
    get:
      tags:
        - Order
      summary: Get a list of products in an order
      security:
        - BearerAuth: []
      parameters:
        - name: id
          required: true
          in: path
          description: Order ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderWithProducts'
        '401':
          description: No rights to receive another user's information
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Order not found 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  
  /api/product/search:
    get:
      summary: Search products
      tags:
        - Product
      parameters:
        - name: name
          in: query
          description: Product name (partial match)
          required: true
          schema:
            type: string
        - name: priceRange
          in: query
          description: Price range (e.g., "10-20")
          required: false
          schema:
            type: string
        - name: isVegetarian
          in: query
          description: Filter by vegetarian (true/false)
          required: false
          schema:
            type: string
        - name: calRange
          in: query
          description: Calories range (e.g., "100-200")
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Number of products to retrieve
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    $ref: "#/components/schemas/ProductListResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    
  /api/product/{name}:
    get:
      tags:
        - Product
      summary: Get a product by name
      parameters:
        - name: name
          in: path
          description: Product name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          
    put:
      tags:
        - Product
      summary: Update a product by name
      parameters:
        - name: name
          in: path
          description: Product name
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ProductUpdateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                
    delete:
      tags:
        - Product
      summary: Delete a product by name
      parameters:
        - name: name
          in: path
          description: Product name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                
  /api/product:
    get:
      tags:
        - Product
      summary: Get all products by category
      parameters:
        - name: categoryId
          in: query
          description: Category ID
          required: true
          schema:
            type: integer
        - name: priceRange
          in: query
          description: Price range (e.g., "10-20")
          required: false
          schema:
            type: string
        - name: isVegetarian
          in: query
          description: Filter by vegetarian (true/false)
          required: false
          schema:
            type: boolean
        - name: calRange
          in: query
          description: Calories range (e.g., "100-200")
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Number of products to retrieve
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    $ref: "#/components/schemas/ProductListResponse"
                    
    post:
      summary: Create a new product
      tags:
        - Product
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ProductCreateRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          
  /api/category:
    get:
      summary: Get all categories
      tags:
        - Category
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"

  /api/category/{id}:
    get:
      summary: Get a category by ID
      tags:
        - Category
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        second_name:
          type: string
        phone:
          type: string
        password:
          type: string
          minLength: 6
        secret_word:
          type: string
        role:
          type: string
      required:
        - first_name
        - second_name
        - phone
        - password
        - passwordConfirmation
        - secret_word

    UserRegistration:
      type: object
      properties:
        first_name:
          type: string
        second_name:
          type: string
        phone:
          type: string
        password:
          type: string
          minLength: 6
        passwordConfirmation:
          type: string
          minLength: 6
        secret_word:
          type: string
        role:
          type: string
      required:
        - first_name
        - second_name
        - phone
        - password
        - passwordConfirmation
        - secret_word

    UserLogin:
      type: object
      properties:
        phone:
          type: string
        password:
          type: string
      required:
        - phone
        - password

    UserVerification:
      type: object
      properties:
        phone:
          type: string
        secret_word:
          type: string
      required:
        - phone
        - secret_word

    UserPasswordReset:
      type: object
      properties:
        password:
          type: string
        passwordConfirmation:
          type: string
      required:
        - password
        - passwordConfirmation
    
    UpdateUserRequest:
      type: object
      properties:
        first_name:
          type: string
        second_name:
          type: string
        password:
          type: string
        role:
          type: string

    Order:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        address:
          type: string
        status:
          type: string
        amount:
          type: integer
        courier_id:
          type: integer
        orders_products:
          type: array
          items:
            $ref: '#/components/schemas/OrderProduct'
      required:
        - id
        - userId
        - address
        - status
        - amount
    NewOrder:
      type: object
      properties:
        userId:
          type: integer
        address:
          type: string
        status:
          type: string
        amount:
          type: integer
        courier_id:
          type: integer
        orders_products:
          type: array
          items:
            $ref: '#/components/schemas/OrderProduct'
      required:
        - userId
        - address
        - cartItems
        - totalPrice
        - totalQuantity
    OrderCourier:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        address:
          type: string
        status:
          type: string
        amount:
          type: integer
        courier_id:
          type: integer
    OrderWithProducts:
      type: object
      properties:
        quantity:
          type: integer
        product:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            price:
              type: number
            img:
              type: string
    UpdateOrderStatus:
      type: object
      properties:
        status:
          type: string
      required:
        - status
    UpdateOrderCourier:
      type: object
      properties:
        courierId:
          type: integer
    OrderProduct:
      type: object
      properties:
        id:
          type: integer
        quantity:
          type: integer
        orderId:
          type: integer
        productId:
          type: integer
    
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        composition:
          type: string
        protein:
          type: number
        fat:
          type: number
        carbohydrates:
          type: number
        calories:
          type: number
        weight:
          type: number
        vegetarian:
          type: boolean
        img:
          type: string
        categoryId:
          type: integer
    ProductListResponse:
      type: object
      properties:
        count:
          type: integer
        rows:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        minPrice:
          type: number
        maxPrice:
          type: number
        minCalories:
          type: number
        maxCalories:
          type: number

    ProductCreateRequest:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        composition:
          type: string
        protein:
          type: number
        fat:
          type: number
        carbohydrates:
          type: number
        calories:
          type: number
        weight:
          type: number
        vegetarian:
          type: boolean
        categoryId:
          type: integer
        img:
          type: string
          format: binary
    ProductUpdateRequest:
      type: object
      properties:
        newName:
          type: string
        price:
          type: number
        composition:
          type: string
        protein:
          type: number
        fat:
          type: number
        carbohydrates:
          type: number
        calories:
          type: number
        weight:
          type: number
        vegetarian:
          type: boolean
        img:
          type: string
          format: binary
    
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        img:
          type: string
    
    Token:
      type: object
      properties:
        token:
          type: string
    
    securitySchemes:
      BearerAuth: {}

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer